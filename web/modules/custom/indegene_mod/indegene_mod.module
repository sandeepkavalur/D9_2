<?php

use Drupal\Core\Entity;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;

// require \Drupal::root() . '\modules\custom\indegene_mod\users.csv';

function indegene_mod_theme($existing, $type, $theme, $path) {

return [
  // Name of the theme hook. This is used in the controller to trigger the hook.
  'indegene_mod_theme_hook' => [
    'render element' => 'children',
    // If no template name is defined here, it defaults to the name of the theme hook, ie. module-name-theme-hook.html.twig
    'template' => 'indegene-mod-theme-hook',
    // Optionally define path to Twig template files. Defaults to the module's ./templates/ directory.
    'path' => $path . '/templates',
    // Optionally define variables that will be passed to the Twig template and set default values for them.
    'variables' => [
      'variable1' => 'Yet another default text.',
      'variable2' => [0, 0, 0],
      'date' => null,
      'myusername' => null,
    ],
  ],

  // Block theme hook. This is used in the controller to trigger the hook.
  'custom-block' => [
    'render element' => 'children',
    // If no template name is defined here, it defaults to the name of the theme hook, ie. module-name-theme-hook.html.twig
    'template' => 'custom-block',
    // Optionally define path to Twig template files. Defaults to the module's ./templates/ directory.
    'path' => $path . '/templates',
    // Optionally define variables that will be passed to the Twig template and set default values for them.
    'variables' => [
      'data' => null,
    ],
  ],

  // Form theme hook. This is used in the controller to trigger the hook.
  'custom-form' => [
    'render element' => 'form',
    // If no template name is defined here, it defaults to the name of the theme hook, ie. module-name-theme-hook.html.twig
    'template' => 'custom-form',
    // Optionally define path to Twig template files. Defaults to the module's ./templates/ directory.
    'path' => $path . '/templates',
    // Optionally define variables that will be passed to the Twig template and set default values for them.

  ],

  // Form theme hook. This is used in the controller to trigger the hook.
  'custom-config-form' => [
    'render element' => 'form',
    // If no template name is defined here, it defaults to the name of the theme hook, ie. module-name-theme-hook.html.twig
    'template' => 'custom-config-form',
    // Optionally define path to Twig template files. Defaults to the module's ./templates/ directory.
    'path' => $path . '/templates',
    // Optionally define variables that will be passed to the Twig template and set default values for them.

  ],
];

}

function indegene_mod_preprocess_page(&$variables){
  $variables['#attached']['library'][] = 'indegene_mod/indegene_mod_styling';
  $variables['mynewvar'] = 'sandeep';

  if(\Drupal::currentUser()-> hasPermission('inde administer content types')){
    echo 'I have permission here.';
  }
  else{
    echo 'I don\'t have permission here.';
  }
}

function mynewmethod(){
  $num1 = 5;
  return $num1;
}


// function indegene_mod_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//   if($form_id == 'ex81_hello_form'){
//     $form['accept1'] = array(
//       '#type' => 'checkbox',
//       '#title' => t('This is done using form alter'),
//       '#description' => t('form alter description'),
//     );
//   }
// }

function indegene_mod_form_ex81_hello_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['accept1'] = array(
    '#type' => 'checkbox',
    '#title' => t('This is done using form alter form id hook'),
    '#description' => t('form alter description of form id hook'),
  );

  $form['actions']['submit']['#submit'][] = 'custom_callback';
}

function custom_callback() {
  \Drupal::messenger()->addMessage('Custom callback funtion called here...');
}

// function indegene_mod_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {

//   // Remove the contextual links on all blocks that provide them.
//   if (isset($build['#contextual_links'])) {
//     unset($build['#contextual_links']);
//   }
// }


/**
 * Implements hook_cron().
 */
function indegene_mod_cron() {

  $handle = fopen(\Drupal::root() . '\modules\custom\indegene_mod\3users.csv', 'r');
  $key = 0;
  $data = [];

  while(($row = fgetcsv($handle, 1000, ',')) !== false) {
    if(user_load_by_mail($row[5])){
      continue;
    }
    else {
      $data['user'][$key]['FirstName'] = $row[0];
      $data['user'][$key]['LastName'] = $row[1];
      $data['user'][$key]['UserName'] = $row[2];
      $data['user'][$key]['Gender'] = $row[3];
      $data['user'][$key]['Role'] = $row[4];
      $data['user'][$key]['Email'] = $row[5];
      $data['user'][$key]['Password'] = $row[6];
      $key++;
    }
  }

  // Get queue.
  // $queue = \Drupal::queue('indegene_mod_queue');
  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('indegene_mod_queue');

  // Create item to queue.
  foreach($data['user'] as $key => $val){
    $queue->createItem($val);
  }


  // create users programmatically
  // foreach($data['user'] as $key => $val){
  //   // Create user object.
  //   $user = User::create();

  //   //Mandatory settings
  //   $user->setPassword($val['Password']);
  //   $user->enforceIsNew();
  //   $user->setEmail($val['Email']);
  //   $user->setUsername($val['UserName']); //This username must be unique and accept only a-Z,0-9, - _ @ .
  //   $user->addRole($val['Role']); //E.g: authenticated
  //   //custom fields
  //   $user->set("field_first_name", $val['FirstName']);
  //   $user->set("field_last_name", $val['LastName']);
  //   $user->set("field_gender", $val['Gender']);

  //   $user->activate();
  //   $results[] = $user->save();
  // }


  //create users using batch
  // $batch = array(
  //   'title' => t('Creating Node...'),
  //   'operations' => array(
  //     array(
  //       '\Drupal\indegene_mod\CreateNode::createNodeBatch',
  //       [$data]
  //     ),
  //   ),
  //   'finished' => '\Drupal\indegene_mod\CreateNode::createNodeBatchFinishedCallback',
  // );

  // batch_set($batch);
}


function indegene_mod_entity_presave(EntityInterface $entity){
  if($entity->getEntityTypeId() == 'node' && ($entity->bundle() == 'movies')) {
    if($entity->field_article_refer){
      $reference_entity = $entity->field_article_refer->first();
      if(isset($reference_entity)){
        $article_node_id = $entity->field_article_refer->first()->getValue()['target_id'];
        $article_data = Node::load($article_node_id);
        $arti_img_url = $article_data->field_image->entity->getFileUri();
        $arti_img = $article_data->field_image;
      }
    }
    // if($entity->field_get_img){
    //   kint($entity->field_get_img->fileuri());die;
    // }
    if($entity->field_get_img_non_media){
      $entity->field_get_img_non_media = $arti_img->first()->getValue();
    }
  }
}

function indegene_mod_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id == 'node_movies_edit_form' || $form_id == 'node_movies_add_form'){
    $form['#attached']['library'][] = 'indegene_mod/php_to_js_variable';
    $form['#attached']['drupalSettings']['dummy_data'][] = ['first_name' => 'sandeep', 'last_name' => 'kavalur'];
  }
}
